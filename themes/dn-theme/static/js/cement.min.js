!function () { !function ($) { $.fn.cement = function (options) { function refresh(event) { $(event.data.containers).each(function () { var container = $(this); "static" === container.css("position") && container.css("position", "relative"), container.css("box-sizing", "border-box"); var paddingTop = parseInt(container.css("paddingTop").replace(/[^0-9-]/g, "")), paddingLeft = parseInt(container.css("paddingLeft").replace(/[^0-9-]/g, "")), paddingBottom = parseInt(container.css("paddingBottom").replace(/[^0-9-]/g, "")); _.columns = _.columnsMax + 1; var unit = 0; do _.columns-- , unit = (container.width() - _.horizontalGutter * (_.columns - 1)) / _.columns; while (unit < _.columnMinWidth && 1 != _.columns); var unit = (container.width() - _.horizontalGutter * (_.columns - 1)) / _.columns, items = container.find(_.brickSelector), matrix = new Array(_.columns + 1).join("0"); items.each(function () { var item = $(this); "undefined" == typeof item.data(PARAM_WIDTH) && item.data(PARAM_WIDTH, 1), "undefined" == typeof item.data(PARAM_HEIGHT) && item.data(PARAM_HEIGHT, 1), typeof item.data(PARAM_WIDTH) + "-max" != "undefined" && item.data(PARAM_WIDTH, item.data(PARAM_WIDTH + "-max")), item.data(PARAM_WIDTH) > _.columns && (item.data(PARAM_WIDTH + "-max", item.data(PARAM_WIDTH)), item.data(PARAM_WIDTH, _.columns)); var index = -1, min = 0, brick = Array.apply(null, new Array(item.data(PARAM_HEIGHT))).map(function () { return new Array(item.data(PARAM_WIDTH) + 1).join("1") }).join(new Array(_.columns - item.data(PARAM_WIDTH) + 1).join("0")), search = brick.replace(/0/g, ".").replace(/1/g, "0"); do { var match = matrix.substr(min).match(search); if (match) { var index = match.index + min, line = matrix.substr(Math.floor(index / _.columns) * _.columns, _.columns) + "1"; -1 == line.indexOf(new Array(item.data(PARAM_WIDTH) + 1).join("0")) && (matrix += new Array(4 - matrix.length % 4 + 1).join("0"), min = (Math.floor(index / _.columns) + 1) * _.columns, index = -1) } else matrix += new Array(item.data(PARAM_WIDTH) + 1).join("0") } while (-1 == index); var n = search.length, prefix = matrix.substr(0, index), segment = matrix.substr(index, n), suffix = matrix.substr(index + n); matrix = prefix; for (var i = 0; n > i; i++)matrix += parseInt(segment.charAt(i)) || parseInt(brick.charAt(i)); matrix += suffix; var x = Math.floor(index / _.columns), y = index % _.columns; item.css({ position: "absolute", "transition-property": "top, left, bottopm, right", "transition-duration": _.transitionDuration, top: x * (unit + _.horizontalGutter) + paddingTop + "px", left: y * (unit + _.verticalGutter) + paddingLeft + "px", width: item.data(PARAM_WIDTH) * unit + _.horizontalGutter * (item.data(PARAM_WIDTH) - 1) + "px", height: item.data(PARAM_HEIGHT) * unit + _.verticalGutter * (item.data(PARAM_HEIGHT) - 1) + "px" }) }); var rows = Math.ceil(matrix.length / _.columns); container.css("height", rows * unit + _.verticalGutter * (rows - 1) + paddingTop + paddingBottom), container.on("DOMNodeInserted DOMNodeRemoved", { containers: container }, refresh) }) } var defaults = { columns: 4, columnMinWidth: 0, brickSelector: "> *", horizontalGutter: 5, verticalGutter: 5, transitionDuration: ".2s" }; for (property in options) defaults.hasOwnProperty(property) !== options.hasOwnProperty(property) && (console.log("CementJS doesn't support the " + property + " property."), delete options[property]); var _ = $.extend(defaults, options), PARAM_WIDTH = "w", PARAM_HEIGHT = "h"; return _.columnsMax = _.columns, $(window).on("resize", { containers: $(this) }, refresh), refresh({ data: { containers: $(this) } }), this } }(jQuery) }();